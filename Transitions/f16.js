(function() {
  this.f16 = {
    createFromComponent: function(component, additionalData, additionalUpdate) {
      var cloneData, mergeObjects, newComponentCopy, onUpdate;
      cloneData = JSON.parse(JSON.stringify(component.data));
      mergeObjects = function(objFrom, objTo) {
        var j, k, len, ref;
        ref = Object.keys(objFrom);
        for (j = 0, len = ref.length; j < len; j++) {
          k = ref[j];
          if (typeof objTo[k] !== 'object') {
            objTo[k] = objFrom[k];
          } else {
            if (typeof objFrom[k] === 'object') {
              mergeObjects(objFrom[k], objTo[k]);
            } else {
              objTo[k] = objFrom[k];
            }
          }
        }
        return objTo;
      };
      if (additionalData) {
        mergeObjects(additionalData, cloneData);
      }
      onUpdate = new Array;
      if (additionalUpdate) {
        onUpdate.push(additionalUpdate);
      }
      onUpdate.push(component.onUpdate);
      newComponentCopy = f16.createFromTemplate(component.template, cloneData, onUpdate, component.onCreated);
      return newComponentCopy;
    },
    createFromTemplate: function(template, data, onUpdate, onCreated) {
      /*
      for i in [0...this.children.length]
      try
          this.children[i].node.parentNode.removeChild this.children[i].node

      this.node.innerHTML = f16.processVars this.template, this.data
      for i in [0...this.children.length]
      this.node.appendChild this.children[i].node
      this.children[i].update()
      */
      var c, childrenToUpdate, f, j, l, len, n, newEl, newElobj, ref;
      newEl = template.cloneNode(true);
      newEl.removeAttribute('id');
      newEl.classList.toggle('hidden', false);
      newElobj = {
        type: 'f16',
        template: {
          node: newEl,
          nodesToUpdate: []
        },
        node: newEl,
        data: data,
        children: [],
        add: function(child) {
          var whereToPlace;
          this.children.push(child);
          if (child.placement) {
            whereToPlace = this.node.getElementsByTagName('levelTagPlacement')[0];
            whereToPlace.parentNode.insertBefore(child.node, whereToPlace);
          } else {
            this.node.appendChild(child.node);
          }
          return child.update();
        },
        addBefore: function(child) {
          this.children.unshift(child);
          this.node.insertBefore(child.node, this.node.children[0]);
          return child.update();
        },
        onUpdate: onUpdate,
        onCreated: onCreated,
        update: function() {
          var j, len, nodeToUpdate, ref, results;
          ref = this.template.nodesToUpdate;
          results = [];
          for (j = 0, len = ref.length; j < len; j++) {
            nodeToUpdate = ref[j];
            results.push(nodeToUpdate.node.nodeValue = f16.processVars(nodeToUpdate.template, this.data));
          }
          return results;
        }
      };
      childrenToUpdate = f16.parseChildNodes(newElobj.node);
      for (j = 0, len = childrenToUpdate.length; j < len; j++) {
        c = childrenToUpdate[j];
        n = {
          node: c,
          template: c.nodeValue
        };
        newElobj.template.nodesToUpdate.push(n);
      }
      
      //window[template.id] = template
      //if template.parentNode
      //    template.parentNode.removeChild template
      newElobj.node.parentREl = newElobj;
      newElobj.update();
      if (newElobj.onCreated) {
        newElobj.onCreated();
      }
      if (newElobj.onUpdate) {
        if (Array.isArray(newElobj.onUpdate)) {
          for (f = l = 0, ref = newElobj.onUpdate.length; (0 <= ref ? l < ref : l > ref); f = 0 <= ref ? ++l : --l) {
            newElobj.onUpdate[f] = newElobj.onUpdate[f].bind(newElobj);
            newElobj.onUpdate[f]();
          }
        } else {
          newElobj.onUpdate();
        }
      }
      watch(data, function() {
        var m, ref1, results;
        newElobj.data = data;
        newElobj.update();
        if (newElobj.onUpdate) {
          if (Array.isArray(newElobj.onUpdate)) {
            results = [];
            for (f = m = 0, ref1 = newElobj.onUpdate.length; (0 <= ref1 ? m < ref1 : m > ref1); f = 0 <= ref1 ? ++m : --m) {
              results.push(newElobj.onUpdate[f]());
            }
            return results;
          } else {
            return newElobj.onUpdate();
          }
        }
      });
      return newElobj;
    },
    parseChildNodes: function(node) {
      var child, childChild, childChilds, childs, j, l, len, len1, ref;
      childs = new Array;
      ref = node.childNodes;
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (child.nodeType === Node.TEXT_NODE) {
          childs.push(child);
        } else {
          if (child.hasChildNodes) {
            childChilds = f16.parseChildNodes(child);
            for (l = 0, len1 = childChilds.length; l < len1; l++) {
              childChild = childChilds[l];
              childs.push(childChild);
            }
          }
        }
      }
      return childs;
    },
    createIterator: function(parameters) {
      var i, j, newIterator, newObj, ref;
      newIterator = {
        parent: parameters.parent,
        template: parameters.template,
        data: parameters.data,
        onUpdate: parameters.onUpdate,
        onCreated: parameters.onCreated,
        children: [],
        update: function() {
          var checkDiff, i, j, l, newChild, newChildren, oldChildrenData, p, ref, ref1;
          newChildren = new Array;
          oldChildrenData = new Array;
          for (i = j = 0, ref = this.children.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
            oldChildrenData.push(this.children[i].data);
          }
          checkDiff = f16.diff(oldChildrenData, this.data); // CHECK THE DIFFERENCE
          p = 0;
// NEUTRAL ELEMENT
          for (i = l = 0, ref1 = checkDiff.length; (0 <= ref1 ? l < ref1 : l > ref1); i = 0 <= ref1 ? ++l : --l) {
            if (checkDiff[i].action === ' ') {
              newChildren.push(this.children[checkDiff[i].oldPosition]);
            }
            if (checkDiff[i].action === '+') {
              if (checkDiff[i].isMoved === false) { // CREATE NEW ELEMENT
                newChild = f16.createFromTemplate(this.template, this.data[p], this.onUpdate, this.onCreated);
                try {
                  this.parent.insertBefore(newChild.node, this.children[p].node);
                } catch (error) {
                  this.parent.appendChild(newChild.node);
                }
                newChildren.push(newChild); // MOVE ELEMENT
              } else {
                if (newChildren[newChildren.length]) {
                  this.parent.insertBefore(this.children[checkDiff[i].isMoved].node, newChildren[newChildren.length].node);
                } else {
                  this.parent.appendChild(this.children[checkDiff[i].isMoved].node);
                }
                newChildren.push(this.children[checkDiff[i].isMoved]);
              }
            }
            if (checkDiff[i].action === '-') { // REMOVE ELEMENT
              this.parent.removeChild(this.children[checkDiff[i].position].node);
              p -= 1;
            }
            p += 1;
          }
          return this.children = newChildren;
        }
      };
      for (i = j = 0, ref = newIterator.data.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        newObj = this.createFromTemplate(newIterator.template, newIterator.data[i], newIterator.onUpdate, newIterator.onCreated);
        newIterator.parent.appendChild(newObj.node);
        newIterator.children.push(newObj);
      }
      watch(parameters.data, function() {
        return newIterator.update();
      });
      return newIterator;
    },
    diff: function(old, neu) {
      var D, M, MAX, N, V, delElement, elementsToDelete, elementsToMove, goDown, i, iRange, isMoved, j, k, l, m, newElement, o, offs, path, paths, ref, ref1, ref2, ref3, ref4, stayElement, x, y;
      isMoved = function(whatFind, whereFind) {
        var i, j, ref;
        for (i = j = 0, ref = whereFind.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
          if (whatFind === whereFind[i]) {
            return i;
          }
        }
        return false;
      };
      N = old.length;
      M = neu.length;
      MAX = M + N;
      offs = MAX + 1;
      iRange = 2 * MAX;
      V = new Array;
      paths = new Array;
      elementsToMove = new Array;
      elementsToDelete = new Array;
      for (i = j = 0, ref = iRange; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
        V.push(0);
      }
      for (i = l = 0, ref1 = iRange; (0 <= ref1 ? l <= ref1 : l >= ref1); i = 0 <= ref1 ? ++l : --l) {
        paths.push(new Array);
      }
      for (D = m = 0, ref2 = MAX; (0 <= ref2 ? m <= ref2 : m >= ref2); D = 0 <= ref2 ? ++m : --m) {
        for (k = o = ref3 = 0 - D, ref4 = D; o <= ref4; k = o += 2) {
          goDown = (k === (0 - D)) || ((k !== D) && (V[k - 1 + offs] < V[k + 1 + offs]));
          if (goDown) {
            x = V[k + 1 + offs];
            path = paths[k + 1 + offs].slice(0);
            y = x - k;
            if ((y > 0) && (y <= neu.length)) {
              newElement = new Object;
              newElement = {
                position: y - 1,
                action: '+',
                value: neu[y - 1],
                isMoved: isMoved(neu[y - 1], old)
              };
              path.push(newElement);
            }
          } else {
            x = V[k - 1 + offs] + 1;
            path = paths[k - 1 + offs].slice(0);
            if ((x > 0) && (x <= old.length)) {
              delElement = new Object;
              delElement = {
                position: x - 1,
                action: '-',
                value: old[x - 1],
                isMoved: isMoved(old[x - 1], neu)
              };
              path.push(delElement);
            }
          }
          y = x - k;
          while ((x < N) && (y < M) && (old[x] === neu[y])) {
            stayElement = new Object;
            stayElement = {
              oldPosition: x,
              position: y,
              action: ' ',
              value: neu[y]
            };
            path.push(stayElement);
            x += 1;
            y += 1;
          }
          V[k + offs] = x;
          paths[k + offs] = path;
          if (x >= N && y >= M) {
            return path;
          }
        }
      }
    },
    processVars: function(el, vars) {
      var allVars, i, j, r, ref;
      allVars = Object.keys(vars);
      for (i = j = 0, ref = allVars.length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
        r = new RegExp('{{' + allVars[i] + '}}', 'g');
        el = el.replace(r, vars[allVars[i]]);
      }
      return el;
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript